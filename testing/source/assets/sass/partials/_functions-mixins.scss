// retina image mixin
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// rem font-size
@mixin font-size($sizeValue: 16, $lh: null, $base: $baseFontSize) {
  font-size: $sizeValue  + px;
  font-size: ($sizeValue / $base) + rem;
  @if $lh {
    line-height: $lh / $sizeValue;
  }
}

// equal heights columns
@mixin equal-heights($currentPaddingBottom: 0px){
  padding-bottom: 9999px;
  margin-bottom: -9999px + $currentPaddingBottom;
}

// columns no gutter
@mixin cols-no-gutter($columns, $context){
  float: left;
  width: percentage($columns / $context);
}

@mixin fix-cell($fix-direction,$fix-width) {
  width: $fix-width;
  display: block;
  max-width: none;
}

@mixin flex-cell {
  display: table-cell;
  width: 100%;
  vertical-align: top;
}

@mixin fix-flex($fix-direction,$fix-width,$fix-margin) {
  display: table;
  width: 100%;
  @if $fix-direction == 'left' {
    & > :first-child {
      @include fix-cell($fix-direction,$fix-width);
      margin-right: $fix-margin;
    }
    & > :last-child {
      @include flex-cell;
    }
  } @else {
    & > :first-child {
      @include flex-cell;
    }
    & > :last-child {
      @include fix-cell($fix-direction,$fix-width);
      margin-left: $fix-margin;
    }
  }
}